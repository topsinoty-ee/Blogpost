# @format

type User {
  _id: ID!
  userId: String!
  username: String!
  email: String!
  blogs: [Blog!]
  posts: [Post!]
  profilePicture: String
  bio: String
}

type Blog {
  _id: ID!
  name: String!
  description: String
  posts: [Post!]
  authors: [User!]!
  coverImage: String
  published: Boolean
}

type Post {
  _id: ID!
  title: String!
  content: String
  blog: Blog!
  comments: [Comment!]
  author: User!
  likeCount: Int!
  description: String
}

type Comment {
  _id: ID!
  content: String!
  post: Post!
  user: User!
  replies: [Comment!]
  repliesCount: Int!
  likeCount: Int!
}

type Query {
  me: User
  users(
    query: String!
    sort: [SortInput!]
    limit: LimitInput
    skip: SkipInput
  ): [User!]!
  user(query: String!): User
  blogs: [Blog!]!
  blog(id: ID!): Blog
  posts: [Post!]!
  post(id: ID!): Post
  comments: [Comment!]!
  comment(id: ID!): Comment
}

type LoginResponse {
  token: String!
  user: User!
}

type Mutation {
  createUser(username: String!, email: String!, password: String!): User!
  loginUser(username: String!, password: String!): LoginResponse!
  logout: LogoutResponse!
  createBlog(name: String!, description: String!, authorID: ID!): Blog!
  createPost(title: String!, content: String!, blogID: ID!): Post!
  createComment(content: String!, postID: ID!, userID: ID!): Comment!
}
type LogoutResponse {
  success: Boolean!
  message: String!
}

input SortInput {
  field: String!
  order: Int!
}

scalar LimitInput
scalar SkipInput
